
start: metric
    | series_description
    | expr
    | vector_selector
    | start

expr: aggregate_expr
    | binary_expr
    | function_call
    | matrix_selector
    | number_literal
    | offset_expr
    | paren_expr
    | string_literal
    | subquery_expr
    | unary_expr
    | vector_selector

//
// Aggregations.
// 

aggregate_expr  : (aggregate_op aggregate_modifier function_call_body)
                | (aggregate_op function_call_body aggregate_modifier)
                | (aggregate_op function_call_body)


aggregate_modifier: (BY grouping_labels) | (WITHOUT grouping_labels)

// Binary expressions.

// Operator precedence only works if each of those is listed separately.
binary_expr     : expr ADD     bin_modifier expr 
                | expr DIV     bin_modifier expr
                | expr EQL     bin_modifier expr
                | expr GTE     bin_modifier expr
                | expr GTR     bin_modifier expr
                | expr LAND    bin_modifier expr
                | expr LOR     bin_modifier expr
                | expr LSS     bin_modifier expr
                | expr LTE     bin_modifier expr
                | expr LUNLESS bin_modifier expr
                | expr MOD     bin_modifier expr
                | expr MUL     bin_modifier expr
                | expr NEQ     bin_modifier expr
                | expr POW     bin_modifier expr
                | expr SUB     bin_modifier expr

// Using left recursion for the modifier rules, helps to keep the parser stack small and
// reduces allocations
bin_modifier    : group_modifiers

bool_modifier   : BOOL?

on_or_ignoring  : bool_modifier IGNORING grouping_labels
                | bool_modifier ON grouping_labels

group_modifiers: bool_modifier
                | (on_or_ignoring ((GROUP_LEFT | GROUP_RIGHT) maybe_grouping_labels)?)

grouping_labels : (LEFT_PAREN grouping_label_list RIGHT_PAREN)
                | (LEFT_PAREN grouping_label_list COMMA RIGHT_PAREN)
                | (LEFT_PAREN RIGHT_PAREN)

grouping_label_list: (grouping_label_list COMMA grouping_label)
                | grouping_label

grouping_label  : maybe_label

function_call   : IDENTIFIER function_call_body

function_call_body: (LEFT_PAREN function_call_args RIGHT_PAREN)
                | (LEFT_PAREN RIGHT_PAREN)

function_call_args: (function_call_args COMMA expr)
                | expr
                | (function_call_args COMMA)


// Expressions inside parentheses.


paren_expr      : LEFT_PAREN expr RIGHT_PAREN


// Offset modifiers.

offset_expr: expr OFFSET duration


// Subquery and range selectors.

matrix_selector : expr LEFT_BRACKET time_range RIGHT_BRACKET

subquery_expr   : (expr LEFT_BRACKET time_range COLON maybe_duration RIGHT_BRACKET)

// Unary expressions.

unary_expr      : unary_op expr

// Vector selectors.

vector_selector: (metric_identifier label_matchers)
                | metric_identifier
                | label_matchers

label_matchers  : (LEFT_BRACE label_match_list RIGHT_BRACE)
                | (LEFT_BRACE label_match_list COMMA RIGHT_BRACE)
                | (LEFT_BRACE RIGHT_BRACE)

label_match_list: (label_match_list COMMA label_matcher)
                | label_matcher

label_matcher   : IDENTIFIER match_op (string_literal | number_literal)

// Metric descriptions.

metric          : (metric_identifier label_set)
                | (label_set)


metric_identifier: METRIC_IDENTIFIER | IDENTIFIER

label_set       : (LEFT_BRACE label_set_list RIGHT_BRACE)
                | (LEFT_BRACE label_set_list COMMA RIGHT_BRACE)
                | (LEFT_BRACE RIGHT_BRACE)?

label_set_list  : (label_set_list COMMA label_set_item)
                | label_set_item

label_set_item  : IDENTIFIER EQL (string_literal | number_literal)

// Series descriptions (only used by unit tests).

series_description: metric series_values

series_values   : series_values SPACE series_item
                | (series_values SPACE)?

series_item     : BLANK
                | (BLANK TIMES uint)
                | series_value
                | (series_value TIMES uint)
                | (series_value signed_number TIMES uint)

series_value    : IDENTIFIER
                | number
                | signed_number


// Keyword lists.

aggregate_op    : AVG | BOTTOMK | COUNT | COUNT_VALUES | MAX | MIN | QUANTILE | STDDEV | STDVAR | SUM | TOPK

// inside of grouping options label names can be recognized as keywords by the lexer. This is a list of keywords that could also be a label name.
maybe_label     : AVG | BOOL | BOTTOMK | BY | COUNT | COUNT_VALUES | GROUP_LEFT | GROUP_RIGHT | IDENTIFIER | IGNORING | LAND | LOR | LUNLESS | MAX | METRIC_IDENTIFIER | MIN | OFFSET | ON | QUANTILE | STDDEV | STDVAR | SUM | TOPK

unary_op        : ADD | SUB

match_op        : EQL | NEQ | EQL_REGEX | NEQ_REGEX 


// Literals

number_literal  : NUMBER

number          : NUMBER

signed_number   : (ADD number)
                | (SUB number)

uint            : NUMBER

duration        : DURATION

time_range      : DURATION | (string_literal [ COLON string_literal ])

string_literal  : STRING


// Wrappers for optional arguments.

maybe_duration  : duration?
                

maybe_grouping_labels: grouping_labels?


// / Operators.
LAND: "and"
LOR: "or"
LUNLESS: "unless"

// Aggregators.
SUM: "sum"
AVG: "avg"
COUNT: "count"
MIN: "min"
MAX: "max"
GROUP: "group"
STDDEV: "stddev"
STDVAR: "stdvar"
TOPK: "topk"
BOTTOMK: "bottomk"
COUNT_VALUES: "count_values"
QUANTILE: "quantile"

// Keywords.
OFFSET: "offset"
BY: "by"
WITHOUT: "without"
ON: "on"
IGNORING: "ignoring"
GROUP_LEFT: "group_left"
GROUP_RIGHT: "group_right"
BOOL: "bool"


LEFT_PAREN:    "("
RIGHT_PAREN:   ")"
LEFT_BRACE:    "{"
RIGHT_BRACE:   "}"
LEFT_BRACKET:  "["
RIGHT_BRACKET: "]"
COMMA:         ","
EQL:           "="
COLON:         ":"
SEMICOLON:     ";"
BLANK:         "_"
TIMES:         "x"
SPACE:         " "

SUB:       "-"
ADD:       "+"
MUL:       "*"
MOD:       "%"
DIV:       "/"
EQLC:      "=="
NEQ:       "!="
LTE:       "<="
LSS:       "<"
GTE:       ">="
GTR:       ">"
EQL_REGEX: "=~"
NEQ_REGEX: "!~"
POW:       "^"

IDENTIFIER: /[a-zA-Z_][a-zA-Z0-9_]*/
METRIC_IDENTIFIER: /[a-zA-Z_:][a-zA-Z0-9_:]*/

STRING : /\'([^\'\\]|\\.)*\'|"([^"\\]|\\.)*"/

DURATION : /\d+(s|m|h|d|w|y)/

%import common.NUMBER

%import common.WS
%ignore WS

COMMENT: "#" /[^\n]/*
%ignore COMMENT